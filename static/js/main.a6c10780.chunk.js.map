{"version":3,"sources":["pages/prediction.jsx","pages/documentation.jsx","App.js","reportWebVitals.js","index.js"],"names":["PredictionPage","userInputValueRef","useRef","predictionValueRef","useEffect","classes","makeStyles","theme","root","flexGrow","title","color","AppBar","background","DokuButton","marginRight","content","marginLeft","marginTop","display","flexDirection","width","height","horizontalImages","funcButton","marginBottom","table","prediction","useStyles","createData","name","value","rows","position","className","Toolbar","Typography","variant","to","Button","TextField","id","label","type","inputRef","InputProps","readOnly","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","scope","contentDiv","LoginButton","DocumentationPage","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c10780.chunk.js","sourcesContent":["import React, {useEffect, useRef} from \"react\";\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {Link} from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nfunction PredictionPage() {\n\n    const userInputValueRef = useRef(0)\n    const predictionValueRef = useRef()\n\n    useEffect(() => {\n    })\n\n\n\n\n\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            flexGrow: 1,\n        },\n        title: {\n            flexGrow: 1,\n            color: \"white\"\n        },\n        AppBar: {\n            background: \"#607d8b\"\n        },\n        DokuButton: {\n            marginRight: 750,\n            color: \"white\"\n        },\n        content: {\n            marginLeft: 100,\n            marginRight: 100,\n            marginTop: 100,\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"400\",\n            height: \"100vh\"\n        },\n        horizontalImages: {\n            display: \"flex\",\n            flexDirection: \"row\"\n        },\n        funcButton: {\n            width: \"fit-content\",\n            marginTop: 10,\n            marginBottom: 10\n        },\n        table: {\n            width: 250,\n        },\n        prediction: {\n            marginLeft: 20\n        }\n    }));\n    const classes = useStyles();\n\n    function createData(name, value) {\n        return {name, value};\n    }\n\n    const rows = [\n        createData('Batch Size', 32),\n        createData('Optimizer', \"Adam\"),\n        createData('Learning Rate', 0.001),\n        createData('Epochs', 20),\n        createData('Loss', \"MSE\"),\n        createData('Training Data size', 500)\n    ];\n\n    return <div>\n        <AppBar position=\"static\" className={classes.AppBar}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Deep Learning - André Schwarz\n                </Typography>\n                <Link to=\"/documentation\">\n                    <Button color=\"primary\" className={classes.DokuButton}>Aufgabe 3 - Zur Dokumentation</Button>\n                </Link>\n            </Toolbar>\n        </AppBar>\n\n        <div className={classes.content}>\n            <Button variant=\"contained\" color=\"primary\"  className={classes.funcButton}> Wert\n                vorhersagen</Button>\n            <div className={classes.horizontalImages}>\n                <TextField id=\"userInput\" label=\"User Input\" type=\"number\" variant=\"outlined\"\n                           inputRef={userInputValueRef}/>\n                <TextField\n                    id=\"prediction\"\n                    InputProps={{\n                        readOnly: true,\n                    }}\n                    className={classes.prediction}\n                    inputRef={predictionValueRef}\n                />\n\n            </div>\n\n            <Button variant=\"primary\"\n                    className={classes.funcButton}>Modellerstellung\n                neustarten</Button>\n\n            <TableContainer component={Paper} className={classes.table}>\n                <Table aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Dessert (100g serving)</TableCell>\n                            <TableCell align=\"right\">Value</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map((row) => (\n                            <TableRow key={row.name}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.name}\n                                </TableCell>\n                                <TableCell align=\"right\">{row.value}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    </div>;\n}\n\nexport default PredictionPage;\n","import React from \"react\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    contentDiv: {\n        marginRight: 50,\n        marginLeft: 50\n    },\n    title: {\n        flexGrow: 1,\n        color: \"black\"\n    },\n    AppBar: {\n        background : \"#607d8b\"\n    },\n    LoginButton: {\n        marginRight: 50,\n        color: \"white\"\n    },\n    horizontalImages: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }\n}));\n\nconst DocumentationPage = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.AppBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Deep Learning - André Schwarz\n                    </Typography>\n                    <Link to=\"/\">\n                        <Button color=\"primary\" className={classes.LoginButton}>Aufgabe 3 - Vorhersage</Button>\n                    </Link>\n                </Toolbar>\n            </AppBar>\n\n            <div className={classes.contentDiv}>\n                <h1>Herangehensweise, Dokumentation und Quellen</h1>\n\n                <h2>Tech Stack</h2>\n\n                <h4>React js</h4>\n                Diese Anwendung wurde mit React erstellt. Dabei übernimmt React die Entwicklung des User Interfaces sowie der Navigation zwischen den\n                beiden Seiten (React Router).\n\n                <h4>Tensorflow js</h4>\n                Tensorflow ist ein Framework, das die Erstellung von Neuronalen Netzen ermöglicht. In diesem Fall wurde die Version für Javascript\n                verwendet.\n                <h4>tensorflow/tfjs-vis</h4>\n                tfjs-vis ist eine Bibliothek von Tensorflow die es erlaubt die erstellten Modelle zu visualisieren und das Training zu überwachen.\n                <h4>Material UI</h4>\n                Material UI wurde verwendet um die Standard UI Komponenten zu benutzen.\n\n\n            </div>\n        </div>\n    );\n};\n\nexport default DocumentationPage;","import React from \"react\";\n\nimport {\n    BrowserRouter as Router,\n    Route\n} from \"react-router-dom\";\nimport PredictionPage from \"./pages/prediction\";\nimport DocumentationPage from \"./pages/documentation\";\n\nfunction App() {\n\n    return <div className=\"App\">\n        <Router basename=\"/word_prediction\">\n            <Route exact path=\"/\" component={PredictionPage}/>\n            <Route exact path=\"/documentation\" component={DocumentationPage}/>\n        </Router>\n    </div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}